name: macOS

on: [push, pull_request]

permissions:
  contents: read

jobs:

#  xcode_11:
#    strategy:
#      fail-fast: false
#      matrix:
#        xcode: ['11','12','13']
#    runs-on: macos-11
#
#    steps:
#      - uses: actions/checkout@v5
#        with:
#          submodules: recursive
#      - uses: maxim-lobanov/setup-xcode@v1
#        with:
#          xcode-version: ${{ matrix.xcode }}
#      - name: cmake
#        run: cmake -S . -B build -DJSONCONS_SANITIZE=ON -DCMAKE_BUILD_TYPE=Debug -DJSONCONS_BUILD_TESTS=On 
#      - name: build
#        working-directory: build/
#        run: cmake --build . 
#      - name: test
#        working-directory: build/
#        run: ctest --output-on-failure


#  xcode_12:
#    strategy:
#      fail-fast: false
#      matrix:
#        xcode: ['13','14']
#    runs-on: macos-12
#
#    steps:
#      - uses: actions/checkout@v5
#        with:
#          submodules: recursive
#      - uses: maxim-lobanov/setup-xcode@v1
#        with:
#          xcode-version: ${{ matrix.xcode }}
#      - name: cmake
#        run: cmake -S . -B build -DJSONCONS_SANITIZE=ON -DCMAKE_BUILD_TYPE=Debug -DJSONCONS_BUILD_TESTS=On 
#      - name: build
#        working-directory: build/
#        run: cmake --build . 
#      - name: test
#        working-directory: build/
#        run: ctest --output-on-failure

  xcode_2:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v5
    - name: cmake
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DJSONCONS_BUILD_TESTS=On -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON
    - name: build
      run: cmake --build build --parallel 10
    - name: test
      run: cd build ; ctest -j 10 --output-on-failure

  xcode_3:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v5
    - name: cmake
      run: cmake -S . -B build -DJSONCONS_SANITIZE=ON -DCMAKE_BUILD_TYPE=Debug -DJSONCONS_BUILD_TESTS=On -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON
    - name: build
      run: cmake --build build --parallel 10
    - name: test
      run: cd build ; ctest -j 10 --output-on-failure


  xcode_26:
    strategy:
      fail-fast: false
      matrix:
        xcode: ['26']
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}
      - name: cmake
        run: cmake -S . -B build -DJSONCONS_SANITIZE=ON -DCMAKE_BUILD_TYPE=Debug -DJSONCONS_BUILD_TESTS=On 
      - name: build
        working-directory: build/
        run: cmake --build . 
      - name: test
        working-directory: build/
        run: ctest --output-on-failure
            - name: Cache
  uses: actions/cache@v4.3.0
  with:
    # A list of files, directories, and wildcard patterns to cache and restore
    path: 
    # An explicit key for restoring and saving the cache
    key: 
    # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
    restore-keys: # optional
    # The chunk size used to split up large files during upload, in bytes
    upload-chunk-size: # optional
    # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
    enableCrossOsArchive: # optional, default is false
    # Fail the workflow if cache entry is not found
    fail-on-cache-miss: # optional, default is false
    # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
    lookup-only: # optional, default is false
    # Run the post step to save the cache even if another step before fails
    save-always: # optional, default is false
          
